package com.il.repositoryimport com.il.model.Destinationimport com.il.model.Receiverimport io.micronaut.context.annotation.Valueimport jakarta.inject.Singletonimport reactor.core.publisher.Monoimport reactor.kotlin.core.publisher.toMonoimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClientimport software.amazon.awssdk.enhanced.dynamodb.Keyimport software.amazon.awssdk.enhanced.dynamodb.TableSchemaimport software.amazon.awssdk.enhanced.dynamodb.model.Page@Singletonclass ReceiverRepository (        private val dynamoDbEnhancedAsyncClient: DynamoDbEnhancedAsyncClient,        @Value("\${dynamodb.receiver-table-name}") val receiverTableName: String        ) {    private val tableSchema = TableSchema.fromBean(Receiver::class.java)    private val receiverTable = dynamoDbEnhancedAsyncClient.table(receiverTableName, tableSchema)    fun find(id: String): Mono<Receiver> {        val key = Key.builder().partitionValue(id).build()        return receiverTable.getItem(key).toMono()    }    fun save(receiver: Receiver) : Mono<Receiver> {        receiverTable.putItem(receiver).get()        return find(receiver.id.toString())    }    fun update(id: String, receiver: Receiver) : Mono<Receiver> {        val key = Key.builder().partitionValue(id).build()        var existingDestination = receiverTable.getItem(key).get()        existingDestination.receiver = receiver.receiver?: existingDestination.receiver        if (existingDestination != null) {            receiverTable.updateItem(existingDestination).get()        }        return find(id)    }    fun delete(id: String): Mono<Receiver> {        val key = Key.builder().partitionValue(id).build()        return receiverTable.deleteItem(key).toMono()    }    fun findAll(): Mono<Page<Receiver>> {        return receiverTable.scan().toMono()    }}